/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteRouteImport } from './routes/_authenticated/route'
import { Route as authRouteRouteImport } from './routes/(auth)/route'
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index'
import { Route as AuthenticatedUsersRouteImport } from './routes/_authenticated/users'
import { Route as AuthenticatedStudentsRouteImport } from './routes/_authenticated/students'
import { Route as AuthenticatedPublishersRouteImport } from './routes/_authenticated/publishers'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedLoansRouteImport } from './routes/_authenticated/loans'
import { Route as AuthenticatedCoursesRouteImport } from './routes/_authenticated/courses'
import { Route as AuthenticatedBooksRouteImport } from './routes/_authenticated/books'
import { Route as AuthenticatedAuthorsRouteImport } from './routes/_authenticated/authors'
import { Route as authResetPasswordRouteImport } from './routes/(auth)/reset-password'
import { Route as authLoginRouteImport } from './routes/(auth)/login'
import { Route as authForgotPasswordRouteImport } from './routes/(auth)/forgot-password'

const AuthenticatedRouteRoute = AuthenticatedRouteRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const authRouteRoute = authRouteRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedUsersRoute = AuthenticatedUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedStudentsRoute = AuthenticatedStudentsRouteImport.update({
  id: '/students',
  path: '/students',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedPublishersRoute = AuthenticatedPublishersRouteImport.update({
  id: '/publishers',
  path: '/publishers',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedLoansRoute = AuthenticatedLoansRouteImport.update({
  id: '/loans',
  path: '/loans',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedCoursesRoute = AuthenticatedCoursesRouteImport.update({
  id: '/courses',
  path: '/courses',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedBooksRoute = AuthenticatedBooksRouteImport.update({
  id: '/books',
  path: '/books',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const AuthenticatedAuthorsRoute = AuthenticatedAuthorsRouteImport.update({
  id: '/authors',
  path: '/authors',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)
const authResetPasswordRoute = authResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => authRouteRoute,
} as any)
const authLoginRoute = authLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)
const authForgotPasswordRoute = authForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => authRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof AuthenticatedIndexRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/reset-password': typeof authResetPasswordRoute
  '/authors': typeof AuthenticatedAuthorsRoute
  '/books': typeof AuthenticatedBooksRoute
  '/courses': typeof AuthenticatedCoursesRoute
  '/loans': typeof AuthenticatedLoansRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/publishers': typeof AuthenticatedPublishersRoute
  '/students': typeof AuthenticatedStudentsRoute
  '/users': typeof AuthenticatedUsersRoute
}
export interface FileRoutesByTo {
  '/': typeof AuthenticatedIndexRoute
  '/forgot-password': typeof authForgotPasswordRoute
  '/login': typeof authLoginRoute
  '/reset-password': typeof authResetPasswordRoute
  '/authors': typeof AuthenticatedAuthorsRoute
  '/books': typeof AuthenticatedBooksRoute
  '/courses': typeof AuthenticatedCoursesRoute
  '/loans': typeof AuthenticatedLoansRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/publishers': typeof AuthenticatedPublishersRoute
  '/students': typeof AuthenticatedStudentsRoute
  '/users': typeof AuthenticatedUsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(auth)': typeof authRouteRouteWithChildren
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/forgot-password': typeof authForgotPasswordRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/reset-password': typeof authResetPasswordRoute
  '/_authenticated/authors': typeof AuthenticatedAuthorsRoute
  '/_authenticated/books': typeof AuthenticatedBooksRoute
  '/_authenticated/courses': typeof AuthenticatedCoursesRoute
  '/_authenticated/loans': typeof AuthenticatedLoansRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/publishers': typeof AuthenticatedPublishersRoute
  '/_authenticated/students': typeof AuthenticatedStudentsRoute
  '/_authenticated/users': typeof AuthenticatedUsersRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/authors'
    | '/books'
    | '/courses'
    | '/loans'
    | '/profile'
    | '/publishers'
    | '/students'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/forgot-password'
    | '/login'
    | '/reset-password'
    | '/authors'
    | '/books'
    | '/courses'
    | '/loans'
    | '/profile'
    | '/publishers'
    | '/students'
    | '/users'
  id:
    | '__root__'
    | '/(auth)'
    | '/_authenticated'
    | '/(auth)/forgot-password'
    | '/(auth)/login'
    | '/(auth)/reset-password'
    | '/_authenticated/authors'
    | '/_authenticated/books'
    | '/_authenticated/courses'
    | '/_authenticated/loans'
    | '/_authenticated/profile'
    | '/_authenticated/publishers'
    | '/_authenticated/students'
    | '/_authenticated/users'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/users': {
      id: '/_authenticated/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof AuthenticatedUsersRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/students': {
      id: '/_authenticated/students'
      path: '/students'
      fullPath: '/students'
      preLoaderRoute: typeof AuthenticatedStudentsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/publishers': {
      id: '/_authenticated/publishers'
      path: '/publishers'
      fullPath: '/publishers'
      preLoaderRoute: typeof AuthenticatedPublishersRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/loans': {
      id: '/_authenticated/loans'
      path: '/loans'
      fullPath: '/loans'
      preLoaderRoute: typeof AuthenticatedLoansRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/courses': {
      id: '/_authenticated/courses'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof AuthenticatedCoursesRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/books': {
      id: '/_authenticated/books'
      path: '/books'
      fullPath: '/books'
      preLoaderRoute: typeof AuthenticatedBooksRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/_authenticated/authors': {
      id: '/_authenticated/authors'
      path: '/authors'
      fullPath: '/authors'
      preLoaderRoute: typeof AuthenticatedAuthorsRouteImport
      parentRoute: typeof AuthenticatedRouteRoute
    }
    '/(auth)/reset-password': {
      id: '/(auth)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof authResetPasswordRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginRouteImport
      parentRoute: typeof authRouteRoute
    }
    '/(auth)/forgot-password': {
      id: '/(auth)/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof authForgotPasswordRouteImport
      parentRoute: typeof authRouteRoute
    }
  }
}

interface authRouteRouteChildren {
  authForgotPasswordRoute: typeof authForgotPasswordRoute
  authLoginRoute: typeof authLoginRoute
  authResetPasswordRoute: typeof authResetPasswordRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authForgotPasswordRoute: authForgotPasswordRoute,
  authLoginRoute: authLoginRoute,
  authResetPasswordRoute: authResetPasswordRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface AuthenticatedRouteRouteChildren {
  AuthenticatedAuthorsRoute: typeof AuthenticatedAuthorsRoute
  AuthenticatedBooksRoute: typeof AuthenticatedBooksRoute
  AuthenticatedCoursesRoute: typeof AuthenticatedCoursesRoute
  AuthenticatedLoansRoute: typeof AuthenticatedLoansRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedPublishersRoute: typeof AuthenticatedPublishersRoute
  AuthenticatedStudentsRoute: typeof AuthenticatedStudentsRoute
  AuthenticatedUsersRoute: typeof AuthenticatedUsersRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedAuthorsRoute: AuthenticatedAuthorsRoute,
  AuthenticatedBooksRoute: AuthenticatedBooksRoute,
  AuthenticatedCoursesRoute: AuthenticatedCoursesRoute,
  AuthenticatedLoansRoute: AuthenticatedLoansRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedPublishersRoute: AuthenticatedPublishersRoute,
  AuthenticatedStudentsRoute: AuthenticatedStudentsRoute,
  AuthenticatedUsersRoute: AuthenticatedUsersRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
